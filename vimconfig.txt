" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

runtime! debian.vim

call plug#begin('~/.vim/plugged')


Plug 'nanotech/jellybeans.vim'
Plug 'jiangmiao/auto-pairs' "auto completes [] and () and makes life a bit easier
Plug 'tpope/vim-commentary' "Comment stuff
Plug 'tpope/vim-surround' "Allows me to change { to [ and what not
Plug 'wellle/targets.vim' "adds more targets like [ or , - lazy but useful 
Plug 'junegunn/fzf.vim'
Plug 'lervag/vimtex'
Plug 'vim-scripts/vim-mouse'
Plug 'github/copilot.vim'
Plug 'scrooloose/nerdtree'
Plug 'tribela/vim-transparent'
Plug 'junegunn/fzf', {'do': { -> fzf#install() }}
Plug 'junegunn/fzf.vim'
Plug 'dense-analysis/ale'

call plug#end()

syntax enable
set background=dark
colorscheme gruvbox

"Numéro de ligne absolu

set number

"Activer ALE pour la détection d'erreurs (linting) et la correction automatique
let g:ale_linters = {
    \ 'c': ['gcc'],
    \ 'python': ['flake8', 'pylint'],
    \ 'pml': ['spin'],
    \ }

" Configurer un linter pour Promela (SPIN)
let g:ale_linter_aliases = {
    \ 'promela': 'pml',
    \ }

let g:ale_linters['pml'] = ['spin']

" Spécifier la commande SPIN pour la détection d'erreurs en Promela
let g:ale_linters_settings = {
    \ 'pml': {
    \   'spin': {
    \     'executable': 'spin',
    \     'command': 'spin -a %s',
    \     'callback': function('ale#handlers#detect_errorformat')
    \   }
    \ },
\}

" Activer l'affichage des erreurs à la volée (sans bloquer l'édition)
let g:ale_lint_on_text_changed = 'always'
let g:ale_lint_on_enter = 1

" Activer la correction automatique des erreurs si disponible
let g:ale_fix_on_save = 1
let g:ale_fixers = {
    \ 'python': ['autopep8', 'black'],
    \ 'c': ['clang-format'],
    \ }

" Afficher les erreurs en bas de l'écran
let g:ale_echo_cursor = 1" default

let g:transparent_groups = ['Normal', 'Comment', 'Constant', 'Special', 'Identifier',
                            \ 'Statement', 'PreProc', 'Type', 'Underlined', 'Todo', 'String',
                            \ 'Function', 'Conditional', 'Repeat', 'Operator', 'Structure',
                            \ 'LineNr', 'NonText', 'SignColumn', 'CursorLineNr', 'EndOfBuffer']

" Pmenu
let g:transparent_groups += ['Pmenu']
"Global options
filetype plugin indent on
syntax on "activates syntax highlighting among other things
set background=dark "set hg group to dark
set backspace=indent,eol,start "Fixes the backspace
set conceallevel=1 "Allows me to conceal latex syntax if not on line
set encoding=utf-8 "required by YCM
set expandtab
set foldlevel=99
set foldmethod=indent "fold your code.
set hidden "work with multiple unsaved buffers.
set incsearch "highlights as you search
set ignorecase
set smartcase
set rnu nu "sets line numbers
set splitbelow splitright
set termguicolors "True colors term support
set viminfo+=n~/.vim/viminfo
set omnifunc=syntaxcomplete#Complete
set undodir="~/.vim/undo/"
set undofile
set laststatus=2
set showcmd
set guifont=MesloLGMDZ\ Nerd\ Font\ Bold\ 16

nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>


vnoremap <C-c> "+y
map <C-v> "+p
vnoremap<C-c> "*y :let @+=@*<CR> 

"Control f

map <C-f> /
map <CS-f> :vimgrep /
"shift+arrow selection
nmap <S-Up> v<Up>
nmap <S-Down> v<Down>
nmap <S-Left> v<Left>
nmap <S-Right> v<Right>
vmap <S-Up> <Up>
vmap <S-Down> <Down>
vmap <S-Left> <Left>
vmap <S-Right> <Right>
imap <S-Up> <Esc>v<Up>
imap <S-Down> <Esc>v<Down>
imap <S-Left> <Esc>v<Left>
imap <S-Right> <Esc>v<Right>

vmap <C-c> y<Esc>i
vmap <C-x> d<Esc>i
map <C-v> pi
imap <C-v> <Esc>pi
imap <C-z> <Esc>ui

" Aller au début du fichier avec PageUp
nnoremap <PageUp> gg

" Aller à la fin du fichier avec PageDown
nnoremap <PageDown> G

nnoremap <C-Left> :tabprevious<CR>
nnoremap <C-Right> :tabnext<CR>
    
" FZF finder shortcut
nnoremap <C-p> :Files<Cr>

"Mode insertion
inoremap <C-z> <C-o>:undo<CR>i
inoremap <C-y> <C-o>:redo<CR>i

" Mode normal
nnoremap <C-z> :undo<CR>
nnoremap <C-y> :redo<CR>

" Mode visuel
vnoremap <C-z> :undo<CR>
vnoremap <C-y> :redo<CR>


" Raccourci pour annuler (Ctrl+Z) en mode d'insertion
inoremap <C-z> <Esc>:undo<CR>

" Raccourci pour rétablir (Ctrl+Y) en mode d'insertion
inoremap <C-y> <Esc>:redo<CR>

" Remap Ctrl+a to select all text
nnoremap <C-a> ggVG


inoremap <C-b> <C-O>:normal! diw<CR>
inoremap <C-K> <C-O>:normal! dd<CR>
inoremap <C-D> <C-O>:normal! yyp<CR>

"Vim will load $VIMRUNTIME/defaults.vim if the user does not have a vimrc.
" This happens after /etc/vim/vimrc(.local) are loaded, so it will override
" any settings in these files.
" If you don't want that to happen, uncomment the below line to prevent
" defaults.vim from being loaded.
" let g:skip_defaults_vim = 1

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif


" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"filetype plugin indent on

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)


let g:vimtex_compiler_latexmk = {
  \ 'exe': 'latexmk',
  \ 'args': ['-pdf', '-interaction=nonstopmode', '-synctex=1', '%'],
  \ }
  
nnoremap <C-q> :call CompileWithZathura()<CR>

function! CompileWithZathura()
    " Enregistre le fichier
    silent! w

    " Compile avec VimTeX
    silent! VimtexCompile

    " Vérifie si la compilation a réussi
    if v:shell_error
        echo "Erreur de compilation. Voir la fenêtre de sortie pour plus de détails."
    else
        " Ouvre le PDF avec Zathura en mode noir
        silent! !zathura --mode=dark %:r.pdf &
    endif
endfunction


filetype plugin indent on
set mouse=a

syntax enable
set nocompatible
syntax on
filetype plugin on
filetype indent on
set number
" Set shift width to 4 spaces.
set shiftwidth=4

" Set tab width to 4 columns.
set tabstop=4

" Use space characters instead of tabs.
set expandtab

" Do not save backup files.
set nobackup

" Do not let cursor scroll below or above N number of lines when scrolling.
set scrolloff=10

" Do not wrap lines. Allow long lines to extend as far as the line goes.
set nowrap

" While searching though a file incrementally highlight matching characters as you type.
set incsearch

" Ignore capital letters during search.
set ignorecase

" Override the ignorecase option if searching for capital letters.
" This will allow you to search specifically for capital letters.
set smartcase
" Use highlighting when doing a search.
set hlsearch

" Set the commands to save in history default number is 20.
set history=1000

" Enable auto completion menu after pressing TAB.
set wildmenu

" Make wildmenu behave like similar to Bash completion.
set wildmode=list:longest

" There are certain files that we would never want to edit with Vim.
" Wildmenu will ignore files with these extensions.
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx



" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

